# ДЗ-26 Очередная матрица

#       Написать функцию сортировки двухмерного списка МхМ (матрицы)
# Значение М - задаётся пользователем, с клавиатуры. Может быть любым
# целым, положительным числом, больше 5.
#
# Функция должна:
#    1. найти сумму элементов столбцов и отсортировать столбцы по
#       возрастанию этих сумм
#    2. отсортировать каждый нечётный столбец по возрастанию значений снизу
#       вверх, а каждый чётный столбец по возрастанию значений сверху вниз.
#
#       Так же, ваша программа должна иметь функцию вывода данного списка
# на экран. При выводе, внизу каждого столбца должна выводиться сумма
# элементов этого столбца.
#
# Что можно использовать:
#    1. для создания списка использовать ТОЛЬКО 'list comprehension' и
#       генератор случайных чисел. Диапазон случайных чисел для заполнения
#       списка от 1 до 50. Список должен создаваться однострочным
#       выражением.
#    2. Можно использовать ТОЛЬКО ДВА списка. Первый это двухмерный список
#       размером МхМ, второй, вспомогательный, одномерный список размером
#       М. Использование других списков (или коллекций) НЕДОПУСТИМО.
#    3. Можно использовать ТОЛЬКО ОДНУ переменную М для хранения размера
#       списка, плюс переменные циклов for.
#    4. Для сортировки можно использовать алгоритм пузырьковой сортировки.
#       Использование встроенных функций сортировки - НЕДОПУСТИМО (да и не
#       получится их использовать)!
#    5. Решение должно включать ТОЛЬКО ДВЕ функции: функцию сортировки (по
#       правилам описанным выше) и функцию вывода на экран.
#
# Задача считается решённой верно при условии соблюдения всех требований.
# Аккуратный вывод на экран - приветствуется.

from random import randint

M = int(input("Введите число больше 5: "))
lst = [[randint(1, 50) for j in range(M)] for i in range(M)]
res = []

def sort_matrix(lst):

    print()
    print('До сортировки')
    sum = 0

    for i in range(len(lst[0])):
        for j in range(len(lst)):
            sum += lst[j][i]
        res.append(sum)
        sum = 0

    lst.append(res)

    for i in range(len(lst)):
        for j in range(len(lst[i])):
            print('{:>3}'.format(lst[i][j]), end=' ')
        print()

    for row in range(M - 1):
        for col in range(M - 1 - row):
            if res[col] > res[col + 1]:
                for i in range (len(lst[0])):
                    for j in range(len(lst)):
                        lst[j][col], lst[j][col + 1] = lst[j][col + 1], lst[j][col]
                    break

    for i in range(M):
        for row in range(M - 1):
            for j in range(M - 1 - row):
                if i % 2 == 0 and lst[j][i] < lst[j + 1][i]:
                    lst[j][i], lst[j + 1][i] = lst[j + 1][i], lst[j][i]
                else:
                    if i % 2 == 1 and lst[j][i] > lst[j + 1][i]:
                        lst[j][i], lst[j + 1][i] = lst[j + 1][i], lst[j][i]

sort_matrix(lst)
print()
print('После сортировки')

def print_Matrix(lst):
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            print('{:>3}'.format(lst[i][j]), end=' ')
        print()

print_Matrix(lst)